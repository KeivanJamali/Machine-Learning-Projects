Train Tests
    from sklearn.model_selection import train_test_split

Classification Report
    from sklearn.metrics import classification_report

make 2d
    from sklearn.decomposition import PCA

scale to normal(mean = 0, variance = 1)
    from sklearn.preprocessing import StandardScaler
    sc = StandardScaler()
    data_train_scaled = sc.fit_transform(data_train)
    data_test_scaled = sc.transform(data_test)

---------------------------------------------------------------------------------------------------------------------
SVM-Support Vector Machin
    from sklearn.svm import SVC
    SVC() = The_Model
    The_Model.fit(x_train, y_train)
    The_Model.score(x_test, y_test)


---------------------------------------------------------------------------------------------------------------------
Regression-linear or multy
    from scipy import stats
        stats.linregress(x,y) = slope, intercept, r, p, std_err

    import numpy as np
    from sklearn.metrics import r2_score
        np.poly1d(np.polyfit(x,y,deg)) = The_Model
        r2_score(real_y, model_y)

    from sklearn import linear_model
        linear_model.LinearRegression() = The_Model
        The_Model.fit(x_train, y_train)
        The_Model.predict([[a,b,...]]) = Predict at some x
        The_Model.coef_ = relations(lower better)
        The_Model.score(test, test)


---------------------------------------------------------------------------------------------------------------------
Logistic_Regression
    from sklearn.linear_model import LogisticRegression
    The_Model.fit(x_train, y_train)

Classification Report
---------------------------------------------------------------------------------------------------------------------
K_Means-clustering
    from sklearn.cluster import KMeans
        scale all data!
        KMeans(n_clusters = i, init="k-means++", max_iter = 300, n_init=10, random_stats = 0) = The_Model
        The_Model.fit(X)
        wcss = [The_Model.inertia_,...]
        plot(i[1,...] , wcss)  The Elbow Method
        Now chose the i
        Y of Model X = The_Model.fit_predict(X)
        for cluster centers: The_Model.cluster_centers_[:,the column you want] or [:,the column you want]


    from sklearn.decomposition import PCA
        pca = PCA(n_components=2)
        pca.fit_transform(data or X) = data_2d or X_2d -> [:,0], [:,1]
        pca.transform(centroids for example)

---------------------------------------------------------------------------------------------------------------------
KNN
    from sklearn.neighbors import KNeighborsClassifier
    k = ?
    model = KN...(n_neg = k)
---------------------------------------------------------------------------------------------------------------------
Decision Tree
    from sklearn.tree import DecisionTreeClassifier
    model = Deci...(random_state = 42)